#!/usr/bin/env python3
"""
Enhanced Cognitive Synergy Demo
================================

Demonstrates the enhanced cognitive synergy capabilities including:
- Python-Rust FFI bridge
- LLM integration for cognitive augmentation
- Comprehensive metrics tracking
- MeTTa language integration

Author: OpenCog Collection Contributors
License: GPL-3.0+
"""

import logging
import time
from cognitive_synergy_framework import (
    HypergraphMemory, CognitiveSynergyEngine, CognitiveProcess, Atom
)
from cognitive_synergy_bridge import HybridCognitiveSynergy
from cognitive_llm_integration import LLMCognitiveAugmenter, NeuralSymbolicBridge
from cognitive_synergy_metrics import CognitiveSynergyMetricsCollector, visualize_metrics
from metta_integration import MeTTaInterpreter

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def demo_hybrid_performance():
    """Demonstrate hybrid Python-Rust performance."""
    print("\n" + "="*70)
    print("DEMO 1: Hybrid Python-Rust Performance")
    print("="*70)
    
    hybrid = HybridCognitiveSynergy()
    
    print(f"\nRust bridge available: {hybrid.use_rust}")
    print("\nCreating atoms with automatic optimization...")
    
    start = time.time()
    for i in range(100):
        hybrid.create_atom("Concept", f"TestConcept{i}", truth_value=0.9)
    elapsed = time.time() - start
    
    print(f"Created 100 atoms in {elapsed:.4f}s")
    print("→ Automatically uses Rust when available for performance")


def demo_llm_augmentation():
    """Demonstrate LLM cognitive augmentation."""
    print("\n" + "="*70)
    print("DEMO 2: LLM Cognitive Augmentation")
    print("="*70)
    
    try:
        augmenter = LLMCognitiveAugmenter(model="gpt-4.1-mini")
        
        print("\nGenerating cognitive hypothesis...")
        context = {
            "atoms": [
                {"atom_type": "Concept", "name": "Learning"},
                {"atom_type": "Concept", "name": "Reasoning"}
            ],
            "processes": [
                {"process_id": "ml_learner", "process_type": "machine_learning"},
                {"process_id": "symbolic_reasoner", "process_type": "symbolic"}
            ],
            "high_attention_atoms": ["Concept:Learning"]
        }
        
        hypothesis = augmenter.generate_hypothesis(
            context,
            "How can we improve the synergy between learning and reasoning?"
        )
        
        print(f"\nHypothesis: {hypothesis.hypothesis_text}")
        print(f"Confidence: {hypothesis.confidence:.2%}")
        print(f"Generated by: {hypothesis.generated_by}")
        
        # Neural-Symbolic Bridge
        print("\n" + "-"*70)
        print("Neural-Symbolic Bridge")
        print("-"*70)
        
        bridge = NeuralSymbolicBridge(augmenter)
        
        print("\nConverting natural language to atoms...")
        nl_text = "Machine learning enhances symbolic reasoning"
        atoms = bridge.natural_language_to_atoms(nl_text)
        
        print(f"Input: '{nl_text}'")
        print("Generated atoms:")
        for atom in atoms[:3]:  # Show first 3
            print(f"  - {atom.get('atom_type', 'Unknown')}: {atom.get('name', 'unnamed')}")
        
    except Exception as e:
        print(f"\nLLM augmentation demo skipped: {e}")
        print("(Requires OpenAI API access)")


def demo_metrics_tracking():
    """Demonstrate comprehensive metrics tracking."""
    print("\n" + "="*70)
    print("DEMO 3: Comprehensive Metrics Tracking")
    print("="*70)
    
    # Setup
    memory = HypergraphMemory()
    processes = {
        'reasoning': CognitiveProcess(
            process_id='reasoning',
            process_type='symbolic',
            priority=0.9
        ),
        'learning': CognitiveProcess(
            process_id='learning',
            process_type='machine_learning',
            priority=0.8
        ),
        'perception': CognitiveProcess(
            process_id='perception',
            process_type='sensory',
            priority=0.7
        )
    }
    
    # Add some atoms
    for i in range(20):
        atom = Atom(
            atom_type="Concept",
            name=f"Concept{i}",
            truth_value=0.9,
            attention_value=0.1 * (i % 10)
        )
        memory.add_atom(atom)
    
    # Link some atoms
    memory.link_atoms("Concept:Concept0", "Concept:Concept1", "similarity")
    memory.link_atoms("Concept:Concept1", "Concept:Concept2", "causality")
    
    # Collect metrics
    collector = CognitiveSynergyMetricsCollector()
    
    print("\nCollecting metrics over multiple cycles...")
    for cycle in range(5):
        metrics = collector.collect_metrics(memory, processes)
        
        # Simulate some synergy events
        collector.record_synergy_event(
            ['reasoning', 'learning'],
            novelty=0.6 + cycle * 0.05,
            effectiveness=0.7 + cycle * 0.04
        )
        
        time.sleep(0.1)  # Small delay
    
    # Visualize
    visualize_metrics(collector)
    
    # Export
    collector.export_metrics('demo_metrics.json')
    print("Detailed metrics exported to demo_metrics.json")


def demo_metta_integration():
    """Demonstrate MeTTa language integration."""
    print("\n" + "="*70)
    print("DEMO 4: MeTTa Language Integration")
    print("="*70)
    
    memory = HypergraphMemory()
    interpreter = MeTTaInterpreter(memory)
    
    print("\nMeTTa Expression Evaluation:")
    print("-"*70)
    
    # Arithmetic
    print("\n1. Arithmetic operations:")
    result = interpreter.evaluate("(add 10 20 30)")
    print(f"   (add 10 20 30) = {result}")
    
    result = interpreter.evaluate("(mul 3 (add 2 3))")
    print(f"   (mul 3 (add 2 3)) = {result}")
    
    # Variables
    print("\n2. Variable binding:")
    interpreter.evaluate("(bind $learning_rate 0.01)")
    result = interpreter.evaluate("(mul $learning_rate 100)")
    print(f"   After (bind $learning_rate 0.01)")
    print(f"   (mul $learning_rate 100) = {result}")
    
    # Hypergraph operations
    print("\n3. Hypergraph operations:")
    result = interpreter.evaluate('(add-atom "Concept" "Intelligence")')
    print(f"   (add-atom \"Concept\" \"Intelligence\") = {result}")
    
    result = interpreter.evaluate('(add-atom "Concept" "Learning")')
    print(f"   (add-atom \"Concept\" \"Learning\") = {result}")
    
    result = interpreter.evaluate('(link-atoms "Concept:Intelligence" "Concept:Learning" "enables")')
    print(f"   (link-atoms ...) = {result}")
    
    print(f"\n   Total atoms in memory: {len(memory.atoms)}")


def demo_integrated_synergy():
    """Demonstrate integrated cognitive synergy."""
    print("\n" + "="*70)
    print("DEMO 5: Integrated Cognitive Synergy")
    print("="*70)
    
    print("\nInitializing cognitive synergy engine...")
    
    # Create engine
    engine = CognitiveSynergyEngine()
    memory = engine.get_memory()
    
    # Create hybrid system
    hybrid = HybridCognitiveSynergy()
    
    # Create MeTTa interpreter
    metta = MeTTaInterpreter(memory)
    
    # Create metrics collector
    metrics = CognitiveSynergyMetricsCollector()
    
    print("\n1. Creating cognitive structures with MeTTa...")
    metta.evaluate('(add-atom "Concept" "AGI")')
    metta.evaluate('(add-atom "Concept" "CognitiveSynergy")')
    metta.evaluate('(add-atom "Concept" "Emergence")')
    metta.evaluate('(link-atoms "Concept:AGI" "Concept:CognitiveSynergy" "requires")')
    metta.evaluate('(link-atoms "Concept:CognitiveSynergy" "Concept:Emergence" "produces")')
    
    print(f"   Created {len(memory.atoms)} atoms")
    
    # Register processes
    print("\n2. Registering cognitive processes...")
    processes = {}
    for name, ptype in [
        ('symbolic_reasoning', 'symbolic'),
        ('machine_learning', 'ml'),
        ('pattern_mining', 'mining'),
        ('attention_allocation', 'attention')
    ]:
        process = CognitiveProcess(process_id=name, process_type=ptype)
        engine.register_process(process)
        processes[name] = process
        print(f"   Registered: {name} ({ptype})")
    
    # Collect metrics
    print("\n3. Collecting synergy metrics...")
    current_metrics = metrics.collect_metrics(memory, processes)
    
    print(f"   Process Efficiency: {current_metrics.process_efficiency:.2%}")
    print(f"   Pattern Diversity: {current_metrics.pattern_diversity:.2%}")
    print(f"   Memory Coherence: {current_metrics.memory_coherence:.2%}")
    
    # Simulate synergy event
    print("\n4. Simulating cognitive synergy event...")
    metrics.record_synergy_event(
        ['symbolic_reasoning', 'machine_learning'],
        novelty=0.8,
        effectiveness=0.9
    )
    print("   Synergy event recorded: symbolic_reasoning ↔ machine_learning")
    
    print("\n5. Final system state:")
    print(f"   Total atoms: {len(memory.atoms)}")
    print(f"   Active processes: {len(processes)}")
    print(f"   Synergy events: {len(metrics.synergy_events)}")
    
    print("\n✓ Integrated cognitive synergy demonstration complete!")


def main():
    """Run all demonstrations."""
    print("\n" + "="*70)
    print("ENHANCED COGNITIVE SYNERGY DEMONSTRATION")
    print("OpenCog Collection - Advanced Features")
    print("="*70)
    
    demos = [
        ("Hybrid Performance", demo_hybrid_performance),
        ("LLM Augmentation", demo_llm_augmentation),
        ("Metrics Tracking", demo_metrics_tracking),
        ("MeTTa Integration", demo_metta_integration),
        ("Integrated Synergy", demo_integrated_synergy),
    ]
    
    for name, demo_func in demos:
        try:
            demo_func()
        except Exception as e:
            print(f"\n⚠ Demo '{name}' encountered an error: {e}")
            logger.exception(f"Error in {name}")
    
    print("\n" + "="*70)
    print("DEMONSTRATION COMPLETE")
    print("="*70)
    print("\nKey Features Demonstrated:")
    print("  ✓ Hybrid Python-Rust performance optimization")
    print("  ✓ LLM-augmented cognitive reasoning")
    print("  ✓ Comprehensive metrics and monitoring")
    print("  ✓ MeTTa language for symbolic operations")
    print("  ✓ Integrated multi-paradigm cognitive synergy")
    print("\nFor more information, see:")
    print("  - cognitive_synergy_framework.py")
    print("  - cognitive_synergy_bridge.py")
    print("  - cognitive_llm_integration.py")
    print("  - cognitive_synergy_metrics.py")
    print("  - metta_integration.py")
    print()


if __name__ == "__main__":
    main()

